#!/usr/bin/env groovy
@Library(['piper-lib', 'piper-lib-os','lmit-jenkins-lib']) _

def checkacc() {
	
	withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId:env.BTPCredentialID,usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]){	  
				  sh '''
				  echo "************ Check if Subaccount exists *********************************"
				  echo "************************************************************************** " 
					   pip3 install -r requirements.txt
					   cd scripts
					   python3 installations.py
					   python3 subaccount_exists.py  
				 '''
				is_account_exists = readFile(file: 'myfile.txt')
				print(is_account_exists)	
				return is_account_exists
	}
	
}

node ('master') 
{
	 dockerExecuteOnKubernetes(script: this, dockerImage: 'docker.wdf.sap.corp:51010/sfext:v3-py' )
{

	try {
		 stage('Git-clone')
			{
				withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId:'GithubTools',usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']])
{
				deleteDir()
                checkout scm
				sh'''
				git clone https://$USERNAME:$PASSWORD@github.tools.sap/btp-ppu-test/ReusableActions.git --branch 'master'
				mv ./ReusableActions/* ./
				
				'''
			}
			}
		 
		   
			
			stage ('check_Subaccount_exist') 
			{
				withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId:env.BTPCredentialID,usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']])
{
				    writeJSON file: 'manifest.json', json: params.ManifestJsonFileContent
							data1 = readJSON file:'manifest.json'
							print(data1) 
				    sh '''
				    mv manifest.json ./config/
				    '''
				    is_account_exists = checkacc()
				    print(is_account_exists)	

				    if (is_account_exists == 'True') 
					{

					print("Subaccount already exists.")
					
				     } 
	                          else 
				  {
					  
					  sh "exit 1"
				  }
            
				       
}

				}	  
			
		
		
	stage('Delete Kyma-instances and apps')
	{
		node ('windowskymanode') 
       {	
		 deleteDir()

              withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId:'GithubTools',usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']])
              {
		withKubeConfig([credentialsId: 'kubeconfigfileid']) 
{
             
 
                        sh '''
						 git clone https://github.com/VanitaDhanagar/kyma_subaccount_deletion.git --branch 'main'
				         mv ./kyma_subaccount_deletion/* ./

						 echo "************ Login to kyma Manually for authentication On node windowskymanode *********************************"
						  


                          kubectl version
						  
                          kubectl config view
                          pwd
						  chmod +x ./kyma-un-deployment.sh
						  ./kyma-un-deployment.sh

                        '''   
              
          }
           
	   }
	   }
		 }	
	stage('cloudFoundryDeleteService')
	{
	withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId:env.BTPCredentialID,usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]){
      data = readJSON file: './config/manifest.json'
	 paramOrg = "${data.subaccounts[0].org_name}"
	               print paramOrg
					paramSpace = "${data.subaccounts[0].space_name}"
					print paramSpace
					region = "${data.subaccounts[0].region}"
                             		print region					
					endpoint = "https://api.cf.${region}.hana.ondemand.com"
	 
	cloudFoundryDeleteService(script: this, cfApiEndpoint: endpoint, cfOrg: paramOrg, cfSpace: paramSpace,cfServiceInstance: env.serviceInstanceName,cfCredentialsId: env.BTPCredentialID)


	}
		
	}
	stage('Delete kyma-env')
	{
		withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId:env.BTPCredentialID,usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]){
         data = readJSON file: './config/manifest.json'		  
		 subdomain = "${data.global_logon.subdomain}"
		 print subdomain
		subaccount_subdomain = "${data.subaccounts[0].subdomain_subaccount}"
		print subaccount_subdomain
		btplandscape=params.btpLandscape
		print btplandscape

		
		region = "${data.subaccounts[0].region}"
						
				deleteKymaEnvironment(
							btpCredentialsId: env.BTPCredentialID,
							btpGlobalAccountId:subdomain,
							btpSubdomainName: subaccount_subdomain,
							btpRegion:region,
							btpLandscape:'factory',
							kymaDisplayName:env.kymaDisplayName
						)
	

	}
		
	}
	stage ('Delete provider subaccount')
	{
		withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId:env.BTPCredentialID,usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]){

			  sh '''
					  echo "************ delete provider subaccount ************************************** "
					  echo "************************************************************************** " 
						   cd scripts
						   python3 delete_subaccount.py
					'''
	}
	}
	
	
	}	 
	catch(e){
		echo e.toString()
		echo 'This will run only if failed'
		currentBuild.result = "FAILURE"
	}
	finally {
		emailext body: '$DEFAULT_CONTENT', subject: '$DEFAULT_SUBJECT', to: 'vanita.dhanagar@sap.com'
	}

}
}











		 
